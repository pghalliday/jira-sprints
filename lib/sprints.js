// Generated by CoffeeScript 1.9.3
(function() {
  var Q, request, sprintqueryUri, sprintreportUri;

  request = require('request');

  Q = require('q');

  sprintqueryUri = function(rapidViewId) {
    return '/rest/greenhopper/1.0/sprintquery/' + rapidViewId;
  };

  sprintreportUri = '/rest/greenhopper/1.0/rapid/charts/sprintreport';

  module.exports = function(params) {
    var sprintqueryParams, sprintreportParams;
    params.onTotal = params.onTotal || function() {};
    params.mapCallback = params.mapCallback || function(report) {
      return report;
    };
    sprintqueryParams = {
      method: 'GET',
      strictSSL: params.strictSSL,
      auth: {
        user: params.user,
        pass: params.pass,
        sendImmediately: true
      },
      uri: params.serverRoot + sprintqueryUri(params.rapidView),
      qs: {
        includeHistoricSprints: true,
        includeFutureSprints: true
      }
    };
    sprintreportParams = function(sprintId) {
      return {
        method: 'GET',
        strictSSL: params.strictSSL,
        auth: {
          user: params.user,
          pass: params.pass,
          sendImmediately: true
        },
        uri: params.serverRoot + sprintreportUri,
        qs: {
          rapidViewId: params.rapidView,
          sprintId: sprintId
        }
      };
    };
    return Q().then(function() {
      return Q.nfcall(request, sprintqueryParams);
    }).spread(function(response, body) {
      var data, remaining, reportPromise, reportPromiseCalls, total;
      data = JSON.parse(body);
      total = data.sprints.length;
      params.onTotal(total);
      remaining = total;
      reportPromise = function(sprintId, array) {
        return Q.nfcall(request, sprintreportParams(sprintId)).spread(function(response, body) {
          data = JSON.parse(body);
          array.push(params.mapCallback(data));
          return array;
        });
      };
      reportPromiseCalls = data.sprints.map(function(sprint) {
        return reportPromise.bind(null, sprint.id);
      });
      return reportPromiseCalls.reduce(function(soFar, f) {
        return soFar.then(f);
      }, Q([]));
    });
  };

}).call(this);
